from __future__ import print_function
import os
from unittest import TestCase

from analyzer import parse_result
from sweepline import Segment

class AnalyzerTest(TestCase):
    '''Read and parse segments grouped by neurons and timesteps from file.'''

    @classmethod
    def setUpClass(cls):
        '''Prepare result file.'''
        cls.filename = 'temp.txt'
        cls.result_string = '''
        TIMESTEP: 0, Number of Neurons: 2, Number of nodes: 8
        Neuron 0, Number of nodes: 4
        250.1933 681.3060 268.4279 690.2682
        268.4279 690.2682 273.0158 692.2560
        268.4279 690.2682 273.3755 690.9900
        Neuron 1, Number of nodes: 4
        590.1400 609.3682 614.5756 622.2636
        614.5756 622.2636 617.9754 625.9298
        614.5756 622.2636 619.4528 623.3648
        '''
        with open(cls.filename, 'w') as f:
            f.write(cls.result_string)

    @classmethod
    def tearDownClass(cls):
        '''Delete result file generated by setUpClass.'''
        os.remove(cls.filename)

    def setUp(self):
        '''Open result file.'''
        self.file = open(AnalyzerTest.filename, 'r')

    def tearDown(self):
        '''Close the result file opened in setUp.'''
        self.file.close()

    def test_parse_result(self):
        '''parse_result function return value test.'''
        r = parse_result(self.file)
        # r has only one timestep.
        self.assertEqual(len(r), 1)
        # Each timestep has 2 neurons.
        self.assertEqual(len(r[0]), 2)
        # Each neuron has 3 segments.
        self.assertEqual(len(r[0][0]), 3)
        self.assertEqual(len(r[0][1]), 3)
        # Each segment is a Segment object.
        self.assertTrue(all([isinstance(x, Segment) for x in r[0][0]]))
        self.assertTrue(all([isinstance(x, Segment) for x in r[0][1]]))
